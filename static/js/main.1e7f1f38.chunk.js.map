{"version":3,"sources":["components/ContentHead.js","components/SearchForm.js","utils/API.js","components/Heading.js","components/EmployeeCard.js","App.js","serviceWorker.js","index.js"],"names":["SearchResultContainer","props","className","SearchForm","type","placeholder","onChange","handleInputChange","value","axios","get","Heading","EmployeeCard","alt","name","src","image","firstName","lastName","phoneNumber","email","format","dob","App","state","search","employees","filteredEmployees","event","preventDefault","setState","target","console","log","filter","filteredList","employee","first","last","toLowerCase","includes","trim","API","then","res","data","results","catch","err","this","ContentHead","map","id","key","picture","thumbnail","phone","date","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+OA2BeA,EAzBe,SAACC,GAC7B,OAEE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,sCAEF,yBAAKA,UAAU,SACb,qCAEF,yBAAKA,UAAU,SACb,sCAEF,yBAAKA,UAAU,SACb,sCAEF,yBAAKA,UAAU,SACb,uCCHKC,EAfI,SAACF,GAChB,OACI,oCACI,2BACAG,KAAK,OACLF,UAAU,eACVG,YAAY,SACZC,SAAUL,EAAMM,kBAChBC,MAAOP,EAAMO,U,iBCJV,EACL,WACN,OAAOC,IAAMC,IAND,kDCYDC,EAZC,WACd,OACE,yBAAKT,UAAU,aACb,wBAAIA,UAAU,eAAd,sBACA,uBAAGA,UAAU,qBAAb,0F,iBCsBSU,EA1BM,SAACX,GACpB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKW,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,SAEnC,yBAAKd,UAAU,SACb,2BACGD,EAAMgB,UADT,IACqBhB,EAAMiB,WAG7B,yBAAKhB,UAAU,SACb,2BAAID,EAAMkB,cAEZ,yBAAKjB,UAAU,SACb,2BAAID,EAAMmB,QAEZ,yBAAKlB,UAAU,SACb,kBAAC,IAAD,CAAQmB,OAAO,cAAcpB,EAAMqB,SC6C9BC,E,4MA1DbC,MAAQ,CACNC,OAAQ,GACRC,UAAW,GACXC,kBAAkB,I,EAiBpBpB,kBAAoB,SAAAqB,GAClBA,EAAMC,iBACN,EAAKC,SAAS,CAAEL,OAAQG,EAAMG,OAAOvB,QACrCwB,QAAQC,IAAIL,EAAMG,OAAOvB,OACzB,IAAM0B,EAASN,EAAMG,OAAOvB,MACtB2B,EAAe,EAAKX,MAAME,UAAUQ,QAAO,SAAAE,GAAY,MAEZA,EAAStB,KAAvCG,EAF0C,EAEjDoB,MAAwBnB,EAFyB,EAE/BoB,KAE1B,MADU,UAAMrB,EAAN,YAAmBC,GACjBqB,cAAcC,SAASN,EAAOK,cAAcE,WAE5D,EAAKX,SAAS,CAAEH,kBAAmBQ,K,kEAxBhB,IAAD,OAClBO,IACGC,MAAK,SAACC,GACLZ,QAAQC,IAAIW,GACZ,EAAKd,SAAS,CAAEJ,UAAWkB,EAAIC,KAAKC,QACpCnB,kBAAkBiB,EAAIC,KAAKC,aAG5BC,OAAM,SAACC,GACNhB,QAAQC,IAAIe,Q,+BAmBhB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAxC,MAAOyC,KAAKzB,MAAMC,OACnBlB,kBAAmB0C,KAAK1C,oBAEvB,kBAAC2C,EAAD,MACCD,KAAKzB,MAAMG,kBAAkBwB,KAAI,SAACf,EAAUgB,GAAX,OAChC,kBAAC,EAAD,CACAC,IAAKD,EACLpC,MAAOoB,EAASkB,QAAQC,UACxBtC,UAAWmB,EAAStB,KAAKuB,MACzBnB,SAAUkB,EAAStB,KAAKwB,KACxBnB,YAAaiB,EAASoB,MACtBpC,MAAOgB,EAAShB,MAChBE,IAAKc,EAASd,IAAImC,e,GApDVC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.1e7f1f38.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchResultContainer = (props) => {\n  return (\n    // table style later\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-1\">\n          <h4>Image</h4>\n        </div>\n        <div className=\"col-3\">\n          <h4>Name</h4>\n        </div>\n        <div className=\"col-3\">\n          <h4>Phone</h4>\n        </div>\n        <div className=\"col-3\">\n          <h4>Email</h4>\n        </div>\n        <div className=\"col-2\">\n          <h4>DOB</h4>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchResultContainer;\n","import React from 'react';\n\nconst SearchForm = (props) => {\n    return (\n        <>\n            <input \n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search\"\n            onChange={props.handleInputChange}\n            value={props.value}\n            />\n    \n        </>\n    );\n};\n\nexport default SearchForm;","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=300&nat=us\";\n\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React from \"react\";\n\nconst Heading = () => {\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"text-center\">Employee Directory</h1>\n      <p className=\" lead text-center\">\n        Click on controls to filter by heading or use the search box to narrow\n        your results.\n      </p>\n    </div>\n  );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport Moment from 'react-moment';\nconst EmployeeCard = (props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-1\">\n          <img alt={props.name} src={props.image} />\n        </div>\n        <div className=\"col-3\">\n          <p>\n            {props.firstName} {props.lastName}\n          </p>\n        </div>\n        <div className=\"col-3\">\n          <p>{props.phoneNumber}</p>\n        </div>\n        <div className=\"col-3\">\n          <p>{props.email}</p>\n        </div>\n        <div className=\"col-2\">\n          <Moment format=\"MM/DD/YYYY\">{props.dob}</Moment>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeCard;\n","import React, { Component } from \"react\";\nimport ContentHead from \"./components/ContentHead\";\nimport SearchForm from \"./components/SearchForm\";\nimport API from \"./utils/API\";\nimport Heading from \"./components/Heading\";\nimport EmployeeCard from \"./components/EmployeeCard\";\n\nclass App extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filteredEmployees:[]\n  };\n\n  // When this component mounts, search the RandomUserGenerator API for pictures of kittens\n  componentDidMount() {\n    API.search()\n      .then((res) => {\n        console.log(res);\n        this.setState({ employees: res.data.results,\n        filteredEmployees:res.data.results\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleInputChange = event => {\n    event.preventDefault();\n    this.setState({ search: event.target.value })\n    console.log(event.target.value);\n    const filter = event.target.value;\n    const filteredList = this.state.employees.filter(employee => {\n        // merge data together, then see if user input is anywhere inside\n        const { first: firstName, last: lastName } = employee.name;\n        const name = `${firstName} ${lastName}`;\n        return name.toLowerCase().includes(filter.toLowerCase().trim());\n    });\n    this.setState({ filteredEmployees: filteredList });\n}\n\n  render() {\n    return (\n      <>\n        <Heading />\n        <SearchForm \n        value={this.state.search}\n       handleInputChange={this.handleInputChange}\n       />\n        <ContentHead />\n        {this.state.filteredEmployees.map((employee, id) => (\n          <EmployeeCard \n          key={id}\n          image={employee.picture.thumbnail} \n          firstName={employee.name.first}\n          lastName={employee.name.last}\n          phoneNumber={employee.phone}\n          email={employee.email}\n          dob={employee.dob.date}/>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}