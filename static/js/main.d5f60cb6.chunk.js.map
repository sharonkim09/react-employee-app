{"version":3,"sources":["components/DataHead/index.jsx","components/SearchForm/index.jsx","utils/API.js","components/EmployeeCard/index.jsx","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["SearchResultContainer","props","id","onClick","sortName","SearchForm","className","type","placeholder","onChange","handleInputChange","value","axios","get","EmployeeCard","alt","name","src","image","firstName","lastName","phoneNumber","email","format","dob","Heading","App","state","search","employees","filteredEmployees","sortedName","event","preventDefault","setState","target","console","log","filter","filteredList","employee","first","last","toLowerCase","includes","trim","currentEmployees","sort","a","b","API","then","res","data","results","catch","err","Home","this","DataHead","map","key","picture","medium","phone","date","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d5f60cb6.chunk.js","sourcesContent":["import React from \"react\";\n\n// rendering col headings\nconst SearchResultContainer = (props) => {\n  return (\n    <thead id=\"tableSize\">\n      <th id=\"moveImage\">Image</th>\n      <th onClick={props.sortName}>Name </th>\n      <th>Phone</th>\n      <th>Email</th>\n      <th>DOB</th>\n    </thead>\n  );\n};\n\nexport default SearchResultContainer;\n","import React from \"react\";\nimport \"./style.css\";\n// rendering form with input and button\nconst SearchForm = (props) => {\n  return (\n    <div id=\"formArea\">\n      <div className=\"form-group text-center\">\n        <input\n          type=\"text\"\n          className=\"form text-center\"\n          placeholder=\"Search Employee\"\n          onChange={props.handleInputChange}\n          value={props.value}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchForm;\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=300&nat=us\";\n\n// Export an object with a \"search\" method that searches the Random User Generator API for the passed query\nexport default {\n  search: function () {\n    return axios.get(BASEURL);\n  },\n};\n","import React from \"react\";\nimport Moment from \"react-moment\";\nimport \"./style.css\";\n// rendering data for employees\nconst EmployeeCard = (props) => {\n  return (\n    <tr>\n      <td>\n        <img className=\"rounded-circle\" alt={props.name} src={props.image} />\n      </td>\n      <td>\n        {props.firstName} {props.lastName}\n      </td>\n      <td>{props.phoneNumber}</td>\n      <td>{props.email}</td>\n      <td>\n        <Moment format=\"MM/DD/YYYY\">{props.dob}</Moment>\n      </td>\n    </tr>\n  );\n};\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport \"./style.css\";\n// rendering heading\nconst Heading = () => {\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"text-center\">Employee Directory</h1>\n      <p className=\" lead text-center\">\n        Click on name to alphabetize names or use the search box to narrow your\n        results.\n      </p>\n    </div>\n  );\n};\n\nexport default Heading;\n","import React, { Component } from \"react\";\nimport DataHead from \"./components/DataHead\";\nimport SearchForm from \"./components/SearchForm\";\nimport API from \"./utils/API\";\nimport \"./App.css\";\n// import Heading from \"./components/Heading/index\";\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport Home from \"./components/pages/Home\";\nclass App extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filteredEmployees: [],\n    sortedName: true,\n  };\n\n  // When this component mounts, search the RandomUserGenerator API for pictures of kittens\n  componentDidMount() {\n    API.search()\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          employees: res.data.results,\n          filteredEmployees: res.data.results,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  // function to handle the change in input and looks for employees with what is in the input\n  handleInputChange = (event) => {\n    event.preventDefault();\n    this.setState({ search: event.target.value });\n    console.log(event.target.value);\n    const filter = event.target.value;\n    const filteredList = this.state.employees.filter((employee) => {\n      // merge data together, then see if user input is anywhere inside\n      const { first: firstName, last: lastName } = employee.name;\n      const name = `${firstName} ${lastName}`;\n      return name.toLowerCase().includes(filter.toLowerCase().trim());\n    });\n    this.setState({ filteredEmployees: filteredList });\n  };\n  // function to alphabetize first names of employees\n  sortName = () => {\n    let currentEmployees = this.state.employees;\n    if (this.state.sortedName === true) {\n      currentEmployees.sort((a, b) => {\n        if (a.name.first.toLowerCase() < b.name.first.toLowerCase()) return -1;\n        return 0;\n      });\n      this.setState({ employees: currentEmployees, sortedName: false });\n    } else {\n      currentEmployees.sort((a, b) => {\n        if (a.name.first.toLowerCase() > b.name.first.toLowerCase()) return -1;\n        return 0;\n      });\n      this.setState({ employees: currentEmployees, sortedName: true });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Home />\n        <SearchForm\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n        />\n        <div className=\"container\">\n          <table>\n            <DataHead sortName={this.sortName} />\n            {this.state.filteredEmployees.map((employee, id) => (\n              <EmployeeCard\n                key={id}\n                image={employee.picture.medium}\n                firstName={employee.name.first}\n                lastName={employee.name.last}\n                phoneNumber={employee.phone}\n                email={employee.email}\n                dob={employee.dob.date}\n              />\n            ))}\n          </table>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}